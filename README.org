* λ-calculus reducer

A simple λ-calculus reducer pulled out in a all-nighter of Haskell. Takes a λ-calculus expression and reduces it to it's normal form.

** TO DO

- Fix the parser to need less parenthesis
- A mechanism to add named functions
- A standard library

** Compile

Install the Haskell toolchain, cabal and run:

#+BEGIN_SRC
cabal install parsec optparse-applicative
cabal build
#+END_SRC

The executable is in =dist/build/lambda/lambda=

** Examples

These are some examples of how the program reduces the expressions

#+BEGIN_SRC
$ lambda -e '(\x.a)10'
(λx.a)λf.λx.ffffffffffx -- β -->
a
#+END_SRC

#+BEGIN_SRC
$ lambda -e '\x.(m)x'
λx.mx -- η -->
m
#+END_SRC

#+BEGIN_SRC
echo '(\yx.(m)x)z' | lambda
(λy.λx.mx)z -- β -->
λx.mx -- η -->
m
#+END_SRC

#+BEGIN_SRC
$ lambda -f test.lambda
(λf.(λx.fxx)λx.fxx)g -- β -->
(λx.gxx)λx.gxx -- β -->
g(λx.gxx)λx.gxx
#+END_SRC

#+BEGIN_SRC
$ lambda -e '(\xy.x)y'
(λx.λy.x)y -- α -->
(λx.λz.x)y -- β -->
λz.y
#+END_SRC

